import pandas as pd
from sm_utils import *

# variables to change (again these could go in
# a future analysis spec)
config_tsv = 'configs/test_2.tsv'
configfile: 'configs/config.yml'

# read in config / analysis spec
df = parse_config(config_tsv)
read_types = ['R1', 'R2']

wildcard_constraints:
    plate='|'.join([re.escape(x) for x in df.plate.tolist()]),
    subpool='|'.join([re.escape(x) for x in df.subpool.tolist()]),
    sample='|'.join([re.escape(x) for x in df['sample'].tolist()]),
    lane='|'.join([re.escape(x) for x in df.lane.tolist()]),
    read='|'.join([re.escape(x) for x in read_types]),


rule all:
    input:
        # expand(config['raw']['r1_fastq'],
        #            zip,
        #            plate=df.plate.tolist(),
        #            subpool=df.subpool.tolist(),
        #            sample=df['sample'].tolist(),
        #            lane=df.lane.tolist()),
        # expand(config['raw']['r2_fastq'],
        #           zip,
        #           plate=df.plate.tolist(),
        #           subpool=df.subpool.tolist(),
        #           sample=df['sample'].tolist(),
        #           lane=df.lane.tolist()),
        expand(config['kallisto']['cgn'],
               zip,
               plate=df.plate.tolist(),
               subpool=df.subpool.tolist())

rule symlink_fastq_r1:
    params:
        fastq = lambda wc:get_df_info(wc, df, 'fastq')
    resources:
        mem_gb = 4,
        threads = 1
    output:
        fastq = config['raw']['r1_fastq']
    shell:
        """
        ln -s {params.fastq} {output.fastq}
        """

rule symlink_fastq_r2:
    params:
        fastq = lambda wc:get_df_info(wc, df, 'r2_fastq')
    resources:
        mem_gb = 4,
        threads = 1
    output:
        fastq = config['raw']['r2_fastq']
    shell:
        """
        ln -s {params.fastq} {output.fastq}
        """

rule kallisto:
    input:
        r1_fastq = lambda wc:get_subpool_fastqs(wc, df, config, how='list', read='R1'),
        r2_fastq = lambda wc:get_subpool_fastqs(wc, df, config, how='list', read='R2')
    conda:
        "hpc3sc"
    params:
        bc1_map = config['ref']['bc1_map'],
        barcodes = config['ref']['barcodes'],
        t2g = config['ref']['t2g'],
        ind = config['ref']['ind'],
        c1 = config['ref']['c1'],
        c2 = config['ref']['c2'],
        fastq_str = lambda wc:get_subpool_fastqs(wc, df, config, how='str'),
        odir = config['kallisto']['cgb'].split('counts_unfiltered_modified/')[0]
    resources:
        mem_gb = 250,
        threads = 24
    output:
        config['kallisto']['cgb'],
        config['kallisto']['cggn'],
        config['kallisto']['cgg'],
        config['kallisto']['cgn']
    shell:
        """
        kb count \
            --h5ad \
        	--gene-names \
        	--sum=nucleus \
        	--strand=forward \
        	-r {params.bc1_map} \
        	-w {params.barcodes} \
        	--workflow=nac \
        	-g {params.t2g} \
        	-x SPLIT-SEQ \
        	-i {params.ind} \
        	-t 24 \
        	-o {params.odir} \
        	-c1 {params.c1} \
        	-c2 {params.c2} \
        	{params.fastq_str}
        """
