import pandas as pd
from sm_utils import *

# variables to change (again these could go in
# a future analysis spec)
config_tsv = 'configs/test_2.tsv'
configfile: 'configs/config.yml'

# read in config / analysis spec
df = parse_config(config_tsv)

rule all:
    input:
        expand(config['kallisto']['cgn'],
               zip,
               plate=df.plate.tolist(),
               subpool=df.subpool.tolist())

def get_df_info(wc, df, col):
    temp = df.copy(deep=True)
    temp = temp.loc[(temp.plate==wc.plate)&\
                    (temp.subpool==wc.subpool)&\
                    (temp['sample']==wc.sample)&\
                    (temp.lane==wc.lane)&\
                    (temp.read==wc.read)]
    assert len(temp.index) == 0
    return temp[col].values[0]

rule symlink_fastq_r1:
    params:
        fastq = lambda wc:get_df_info(wc, df, 'fastq')
    resources:
        mem_gb = 4,
        threads = 1
    output:
        fastq = config['raw']['fastq']
    shell:
        """
        ln -s {params.fastq} {output.fastq}
        """

rule symlink_fastq_r2:
    params:
        fastq = lambda wc:get_df_info(wc, df, 'r2_fastq')
    resources:
        mem_gb = 4,
        threads = 1
    output:
        fastq = config['raw']['fastq']
    shell:
        """
        ln -s {params.fastq} {output.fastq}
        """

def get_subpool_fastqs(wc, df, how, read=None):
    """
    Get list of fastqs from the same subpool. Can
    either return as a Python list of strings or a
    formatted string list read to pass to a shell cmd.

    Parameters:
        how (str): {'str', 'list'}. 'list' will return
            Python list of str var. 'str' will return
            Python string
    """
    temp = df.copy(deep=True)
    temp = temp.loc[(temp.plate==wc.plate)&\
                    (temp.subpool==wc.subpool)]

    if how == 'list':
        return expand(config['raw']['fastq'],
                        zip,
                        plate=wc.plate,
                        subpool=wc.subpool,
                        sample=temp['sample'].tolist(),
                        lane=temp['lane'].tolist(),
                        read=read)

    elif how == 'str':
        r1s = expand(config['raw']['fastq'],
                        zip,
                        plate=wc.plate,
                        subpool=wc.subpool,
                        sample=temp['sample'].tolist(),
                        lane=temp['lane'].tolist(),
                        read='R1')
        r2s = r1s = expand(config['raw']['fastq'],
                        zip,
                        plate=wc.plate,
                        subpool=wc.subpool,
                        sample=temp['sample'].tolist(),
                        lane=temp['lane'].tolist(),
                        read='R2')
        fastq_str = ''
        for r1, r2 in zip(r1s, r2s):
            fastq_str+=f' {r1} {r2}'
        return fastq_str

rule kallisto:
    input:
        r1_fastq = lambda wc:get_subpool_fastqs(wc, df, how='list', read='R1'),
        r2_fastq = lambda wc:get_subpool_fastqs(wc, df, how='list', read='R2')
    conda:
        "hpc3sc"
    params:
        bc1_map = config['ref']['bc1_map'],
        barcodes = config['ref']['barcodes'],
        t2g = config['ref']['t2g'],
        ind = config['ref']['ind'],
        c1 = config['ref']['c1'],
        c2 = config['ref']['c2'],
        fastq_str = lambda wc:get_subpool_fastqs(wc, df, how='str'),
        odir = config['kallisto']['cgb'].split('counts_unfiltered_modified/')[0]
    resources:
        mem_gb = 250,
        threads = 24
    output:
        config['kallisto']['cgb'],
        config['kallisto']['cggn'],
        config['kallisto']['cgg'],
        config['kallisto']['cgn']
    shell:
        """
        kb count \
            --h5ad \
        	--gene-names \
        	--sum=nucleus \
        	--strand=forward \
        	-r {params.bc1_map} \
        	-w {params.barcodes} \
        	--workflow=nac \
        	-g {params.t2g} \
        	-x SPLIT-SEQ \
        	-i {params.ind} \
        	-t 24 \
        	-o {params.odir} \
        	-c1 {params.c1} \
        	-c2 {params.c2} \
        	{params.fastq_str}
        """
